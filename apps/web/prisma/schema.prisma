// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id String @id @default(uuid())
  username String @unique
  password String
  workflows Workflow[]
  credentials Credentials[]
}

model Credentials{
  id String @id @default(uuid())
  apiKey String
  Provider LLMProvider
  userId String
  user User @relation(fields:  [userId],references: [id],onDelete: Cascade)
}

enum LLMProvider{
  OpenAI
  Anthropic
  Gemini
}
model Workflow{
  id String @id @default(uuid())
  name String 
  userId String
  user User @relation(fields: [userId],references: [id] ,onDelete: Cascade)
  status workflowStatus
  nodes Node[]
 edges Edge[]
}

model Node{
  id String @id @default(uuid())
  nodeId Int 
  workflowId String
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  type nodeType
  config Json?
  data Json
  xCoordinate Int
  yCoordinate Int
  EdgeSource Edge[] @relation("EdgeSource")
  EdgeTarget Edge[]  @relation("EdgeTarget")
  @@unique([workflowId,nodeId])
}

model Edge{
  id String @id @default(uuid())
  workflowId String
  workflow Workflow @relation(fields: [workflowId],references: [id], onDelete: Cascade)
  sourceId String
  source Node @relation("EdgeSource",fields: [sourceId],references: [id])
  targetId String
  target Node @relation("EdgeTarget",fields: [targetId],references: [id])

  @@index([workflowId])
}



enum nodeType{
  MANUAL 
  SCHEDULER
  LLM
}

enum workflowStatus{
  ACTIVE
  INACTIVE
}